-- Speedometer with sophisticated prediction

local speeds = {}  -- List to hold past speed values
local maxDataPoints = 5  -- Number of past data points to consider for weighted moving average

local function getWeightedAverage(t)
    local weightedSum = 0
    local totalWeights = 0

    for i, v in ipairs(t) do
        weightedSum = weightedSum + v * i
        totalWeights = totalWeights + i
    end

    return weightedSum / totalWeights
end

local function getCurrentSpeed(veh)
    local velocity = veh:get_velocity()
    local speedms = math.sqrt(velocity.x^2 + velocity.y^2 + velocity.z^2)
    return speedms
end

local function speedometerplate(mode)
    while true do
        if localplayer:is_in_vehicle() then
            veh = localplayer:get_current_vehicle()
            local currentSpeed = getCurrentSpeed(veh)

            table.insert(speeds, currentSpeed)
            if #speeds > maxDataPoints then
                table.remove(speeds, 1)  -- Remove the oldest speed value
            end

            local predictedSpeed = getWeightedAverage(speeds)
            local displayedSpeed = math.floor(predictedSpeed * mode)
            veh:set_number_plate_text(tostring(displayedSpeed))
        end
        sleep(0.2)  -- the lower the smoother the speedometer
    end
end

-- Menu Integration
menu.add_array_item("Speedometer Mode", {"KM/H", "MP/H"}, function()
        return 1
end, function(value)
    if value == 1 then 
        speedometerplate(3.6) 
    else 
        speedometerplate(2.23694) 
    end 
end)
